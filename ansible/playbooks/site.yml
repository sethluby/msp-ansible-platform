---
# MSP Platform Master Orchestration Playbook
# Central coordination for all MSP infrastructure management operations
# Supports multi-client environments with tier-based service delivery
#
# Copyright (c) 2025 Seth Luby
# Licensed under the MIT License - see LICENSE file for details

- name: "MSP Platform: Master Orchestration"
  hosts: localhost
  connection: local
  gather_facts: true
  become: true
  vars:
    # Platform configuration
    msp_platform_version: "2.0.0"
    operation_timestamp: "{{ ansible_date_time.iso8601 }}"
    
    # Default operation modes
    operation_mode: "{{ operation | default('status') }}"  # status, deploy, update, compliance, backup, monitor
    target_clients: "{{ clients | default('all') }}"       # all, specific client name, or comma-separated list
    service_tier_filter: "{{ tier | default('all') }}"     # all, foundation, professional, enterprise
    
    # Logging and reporting
    enable_detailed_logging: true
    generate_operation_report: true
    send_notifications: true

  pre_tasks:
    - name: Display operation summary
      ansible.builtin.debug:
        msg: |
          üè¢ MSP Platform Master Orchestration
          ===================================
          Version: {{ msp_platform_version }}
          Operation: {{ operation_mode | title }}
          Targets: {{ target_clients }}
          Service Tier: {{ service_tier_filter | title }}
          Timestamp: {{ operation_timestamp }}

    - name: Validate operation parameters
      ansible.builtin.assert:
        that:
          - operation_mode in ['status', 'deploy', 'update', 'compliance', 'backup', 'monitor', 'onboard', 'disconnect']
          - service_tier_filter in ['all', 'foundation', 'professional', 'enterprise']
        fail_msg: "Invalid operation parameters specified"
        success_msg: "Operation parameters validated"

    - name: Discover active clients
      ansible.builtin.find:
        paths: /opt/msp-platform/clients
        file_type: directory
        depth: 1
      register: client_directories
      when: target_clients == 'all'

    - name: Set client list for all clients
      ansible.builtin.set_fact:
        client_list: "{{ client_directories.files | map(attribute='path') | map('basename') | list }}"
      when: target_clients == 'all'

    - name: Set client list for specific clients
      ansible.builtin.set_fact:
        client_list: "{{ target_clients.split(',') | map('trim') | list }}"
      when: target_clients != 'all'

    - name: Filter clients by service tier
      ansible.builtin.set_fact:
        filtered_clients: "{{ client_list | select('match', tier_pattern) | list }}"
      vars:
        tier_pattern: ".*"  # This would need dynamic filtering based on client configs
      when: service_tier_filter != 'all'

    - name: Use all clients when no tier filter
      ansible.builtin.set_fact:
        filtered_clients: "{{ client_list }}"
      when: service_tier_filter == 'all'

  tasks:
    # Status Operations
    - name: Execute status check operations
      ansible.builtin.include_tasks: tasks/status_operations.yml
      vars:
        target_client_list: "{{ filtered_clients }}"
      when: operation_mode == 'status'
      tags: [status, monitoring]

    # Client Onboarding
    - name: Execute client onboarding
      ansible.builtin.include: onboard-client.yml
      when: operation_mode == 'onboard'
      tags: [onboarding, setup]

    # Client Disconnection
    - name: Execute graceful disconnection
      ansible.builtin.include: prepare-disconnection.yml
      when: operation_mode == 'disconnect'
      tags: [disconnection, cleanup]

    # Infrastructure Deployment
    - name: Execute infrastructure deployment
      ansible.builtin.include_tasks: tasks/deployment_operations.yml
      vars:
        target_client_list: "{{ filtered_clients }}"
      when: operation_mode == 'deploy'
      tags: [deployment, infrastructure]

    # System Updates
    - name: Execute system updates
      ansible.builtin.include: system-update.yml
      vars:
        target_clients: "{{ filtered_clients | join(',') }}"
      when: operation_mode == 'update'
      tags: [updates, maintenance]

    # Compliance Operations
    - name: Execute compliance validation
      ansible.builtin.include: validate-compliance.yml
      vars:
        target_clients: "{{ filtered_clients | join(',') }}"
      when: operation_mode == 'compliance'
      tags: [compliance, validation]

    # Backup Operations
    - name: Execute backup operations
      ansible.builtin.include: backup-recovery.yml
      vars:
        target_clients: "{{ filtered_clients | join(',') }}"
      when: operation_mode == 'backup'
      tags: [backup, recovery]

    # Monitoring Operations
    - name: Execute monitoring operations
      ansible.builtin.include: monitoring-alerting.yml
      vars:
        target_clients: "{{ filtered_clients | join(',') }}"
      when: operation_mode == 'monitor'
      tags: [monitoring, alerting]

    # Security Hardening
    - name: Execute security hardening
      ansible.builtin.include: security-hardening.yml
      vars:
        target_clients: "{{ filtered_clients | join(',') }}"
      when: operation_mode == 'harden'
      tags: [security, hardening]

  post_tasks:
    - name: Generate operation report
      ansible.builtin.template:
        src: templates/operation_report.md.j2
        dest: "/var/log/msp-platform/reports/{{ operation_mode }}_{{ ansible_date_time.date }}_{{ ansible_date_time.time }}.md"
        mode: '0644'
      vars:
        operation_results: "{{ ansible_play_batch }}"
        affected_clients: "{{ filtered_clients }}"
      when: generate_operation_report | bool
      tags: [reporting, documentation]

    - name: Display operation summary
      ansible.builtin.debug:
        msg: |
          ‚úÖ MSP Platform Operation Completed
          ================================
          Operation: {{ operation_mode | title }}
          Clients Affected: {{ filtered_clients | length }}
          Status: SUCCESS
          Duration: {{ ansible_date_time.iso8601 }}
          
          Affected Clients:
          {{ filtered_clients | join('\n') if filtered_clients | length > 0 else 'None' }}

    - name: Log operation completion
      ansible.builtin.lineinfile:
        path: /var/log/msp-platform/operations.log
        line: "{{ operation_timestamp }} | {{ operation_mode }} | {{ filtered_clients | join(',') }} | SUCCESS"
        create: true
        mode: '0644'
      tags: [logging, audit]

    - name: Send completion notifications
      ansible.builtin.include_tasks: tasks/send_notifications.yml
      vars:
        notification_type: "operation_complete"
        operation_summary:
          mode: "{{ operation_mode }}"
          clients: "{{ filtered_clients }}"
          timestamp: "{{ operation_timestamp }}"
      when: send_notifications | bool
      tags: [notification, communication]

# Additional plays for specific infrastructure components
- name: "MSP Infrastructure Health Check"
  hosts: localhost
  connection: local
  gather_facts: false
  become: true
  tasks:
    - name: Check MSP platform services
      ansible.builtin.systemd:
        name: "{{ item }}"
        state: started
      register: service_status
      loop:
        - docker
        - firewalld
        - rsyslog
      tags: [health, services]

    - name: Validate MSP platform directories
      ansible.builtin.stat:
        path: "{{ item }}"
      register: directory_status
      loop:
        - /opt/msp-platform
        - /opt/msp-platform/clients
        - /var/log/msp-platform
        - /var/log/msp-platform/reports
      tags: [health, filesystem]

    - name: Check available resources
      ansible.builtin.shell: |
        echo "Disk: $(df -h /opt/msp-platform | tail -1 | awk '{print $4}') available"
        echo "Memory: $(free -h | grep '^Mem:' | awk '{print $7}') available"
        echo "Load: $(uptime | awk -F'load average:' '{print $2}')"
      register: resource_status
      changed_when: false
      tags: [health, resources]

    - name: Display platform health summary
      ansible.builtin.debug:
        msg: |
          üè• MSP Platform Health Status
          ============================
          Services: {{ 'OK' if service_status.results | selectattr('failed', 'equalto', false) | list | length == service_status.results | length else 'ISSUES' }}
          Directories: {{ 'OK' if directory_status.results | selectattr('stat.exists', 'equalto', true) | list | length == directory_status.results | length else 'MISSING' }}
          Resources: {{ resource_status.stdout_lines | join(' | ') }}
          Active Clients: {{ filtered_clients | length if filtered_clients is defined else 'Unknown' }}
      tags: [health, summary]