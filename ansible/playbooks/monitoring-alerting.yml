---
- name: Monitoring and Alerting Setup
  hosts: "{{ target_hosts | default('all') }}"
  become: true
  gather_facts: true
  vars:
    client_name: "{{ client_name | mandatory }}"
    client_monitoring_profile: "{{ client_monitoring_profile | default(msp_default_monitoring_profile) }}"
    client_alerting_channels: "{{ client_alerting_channels | default([]) }}"
    client_monitoring_thresholds: "{{ client_monitoring_thresholds | default(msp_default_thresholds) }}"
    client_retention_days: "{{ client_retention_days | default(30) }}"
    msp_default_monitoring_profile: "{{ msp_default_monitoring_profile | default('standard') }}"
    msp_monitoring_server: "{{ msp_monitoring_server | default('') }}"
    msp_alertmanager_url: "{{ msp_alertmanager_url | default('') }}"
    msp_syslog_server: "{{ msp_syslog_server | default('') }}"
    msp_default_thresholds:
      cpu_warning: 80
      cpu_critical: 95
      memory_warning: 85
      memory_critical: 95
      disk_warning: 80
      disk_critical: 90
      load_warning: 4.0
      load_critical: 8.0
      swap_warning: 50
      swap_critical: 80
    monitoring_session_id: "{{ ansible_date_time.epoch }}-{{ client_name }}-monitoring"
    monitoring_components: []
    monitoring_profiles:
      basic:
        node_exporter: true
        log_monitoring: false
        process_monitoring: false
        custom_metrics: false
        alerting: true
      standard:
        node_exporter: true
        log_monitoring: true
        process_monitoring: true
        custom_metrics: false
        alerting: true
      advanced:
        node_exporter: true
        log_monitoring: true
        process_monitoring: true
        custom_metrics: true
        alerting: true
        security_monitoring: true

  pre_tasks:
    - name: Validate monitoring configuration context
      tags:
        - validation
      ansible.builtin.assert:
        that:
          - client_name is defined
          - client_monitoring_profile in ['basic', 'standard', 'advanced']
        fail_msg: Invalid monitoring configuration parameters

    - name: Create client monitoring directories
      tags:
        - setup
      loop:
        - /var/log/msp/{{ client_name }}/monitoring
        - /opt/msp-monitoring/{{ client_name }}
        - /etc/prometheus/{{ client_name }}
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: "0755"
        owner: root
        group: root

    - name: Log monitoring setup initiation
      tags:
        - logging
        - skip_ansible_lint
      vars:
        msp_log_server: "{{ msp_syslog_server | default('') }}"
        msp_log_tag: MONITORING-SETUP
        msp_log_message: "Client: {{ client_name }} | Host: {{ inventory_hostname }} | Session: {{ monitoring_session_id }} | Profile: {{ client_monitoring_profile }} | Status: STARTED"
      ansible.builtin.include_role:
        name: msp-logging

  tasks:
    - name: Install and configure Prometheus Node Exporter
      when: monitoring_profiles[client_monitoring_profile].node_exporter
      tags:
        - monitoring
        - node_exporter
      block:
        - name: Create prometheus user
          ansible.builtin.user:
            name: prometheus
            system: true
            shell: /bin/false
            home: /var/lib/prometheus
            create_home: false

        - name: Download Node Exporter
          ansible.builtin.get_url:
            url: https://github.com/prometheus/node_exporter/releases/download/v1.6.1/node_exporter-1.6.1.linux-{{ 'amd64' if ansible_architecture == 'x86_64' else 'arm64' }}.tar.gz
            dest: /tmp/node_exporter.tar.gz
            mode: "0644"

        - name: Extract Node Exporter
          ansible.builtin.unarchive:
            src: /tmp/node_exporter.tar.gz
            dest: /tmp
            remote_src: true

        - name: Install Node Exporter binary
          ansible.builtin.copy:
            src: /tmp/node_exporter-1.6.1.linux-{{ 'amd64' if ansible_architecture == 'x86_64' else 'arm64' }}/node_exporter
            dest: /usr/local/bin/node_exporter
            mode: "0755"
            owner: root
            group: root
            remote_src: true

        - name: Create Node Exporter systemd service
          ansible.builtin.copy:
            content: "[Unit]\nDescription=Prometheus Node Exporter ({{ client_name }})\nWants=network-online.target\nAfter=network-online.target\n\n[Service]\nUser=prometheus\nGroup=prometheus\nType=simple\nExecStart=/usr/local/bin/node_exporter \\\n+  --web.listen-address=:9100 \\\n+  --path.procfs=/proc \\\n+  --path.sysfs=/sys \\\n+  --collector.filesystem.mount-points-exclude=\"^/(sys|proc|dev|host|etc)($$|/)\" \\\n+  --collector.textfile.directory=/var/lib/prometheus/textfile_collector \\\n+  --web.telemetry-path=/metrics/{{ client_name }}\nRestart=on-failure\nRestartSec=5s\n\n[Install]\nWantedBy=multi-user.target\n"
            dest: /etc/systemd/system/node_exporter.service
            mode: "0644"

        - name: Create textfile collector directory
          ansible.builtin.file:
            path: /var/lib/prometheus/textfile_collector
            state: directory
            owner: prometheus
            group: prometheus
            mode: "0755"

        - name: Start and enable Node Exporter
          ansible.builtin.systemd:
            name: node_exporter
            state: started
            enabled: true
            daemon_reload: true
          register: node_exporter_status

        - name: Deploy custom monitoring scripts
          when: monitoring_profiles[client_monitoring_profile].custom_metrics
          tags:
            - monitoring
            - custom_metrics
          block:
            - name: Create system health check script
              ansible.builtin.copy:
                content: "#!/bin/bash\n# System Health Check for {{ client_name }}\n# Generates metrics for Prometheus textfile collector\n\nTEXTFILE_DIR=\"/var/lib/prometheus/textfile_collector\"\nCLIENT_NAME=\"{{ client_name }}\"\n\n# CPU Usage\nCPU_USAGE=$(top -bn1 | grep \"Cpu(s)\" | awk '{print $2}' | cut -d'%' -f1)\necho \"system_cpu_usage_percent{client=\\\"$CLIENT_NAME\\\",host=\\\"$(hostname)\\\"} $CPU_USAGE\" > \"$TEXTFILE_DIR/system_health.prom\"\n\n# Memory Usage\nMEMORY_TOTAL=$(free -m | awk 'NR==2{printf \"%.0f\", $2}')\nMEMORY_USED=$(free -m | awk 'NR==2{printf \"%.0f\", $3}')\nMEMORY_PERCENT=$(awk \"BEGIN {printf \\\"%.2f\\\", $MEMORY_USED/$MEMORY_TOTAL*100}\")\necho \"system_memory_usage_percent{client=\\\"$CLIENT_NAME\\\",host=\\\"$(hostname)\\\"} $MEMORY_PERCENT\" >> \"$TEXTFILE_DIR/system_health.prom\"\necho \"system_memory_total_mb{client=\\\"$CLIENT_NAME\\\",host=\\\"$(hostname)\\\"} $MEMORY_TOTAL\" >> \"$TEXTFILE_DIR/system_health.prom\"\necho \"system_memory_used_mb{client=\\\"$CLIENT_NAME\\\",host=\\\"$(hostname)\\\"} $MEMORY_USED\" >> \"$TEXTFILE_DIR/system_health.prom\"\n\n# Disk Usage\ndf -h | grep -vE '^Filesystem|tmpfs|cdrom' | awk '{print $5 \" \" $6}' | while read usage mountpoint; do\n  usage_num=${usage%?}\n  echo \"system_disk_usage_percent{client=\\\"$CLIENT_NAME\\\",host=\\\"$(hostname)\\\",mountpoint=\\\"$mountpoint\\\"} $usage_num\" >> \"$TEXTFILE_DIR/system_health.prom\"\ndone\n\n# Load Average\nLOAD_1MIN=$(uptime | awk -F'load average:' '{print $2}' | awk '{print $1}' | sed 's/,//')\necho \"system_load_1min{client=\\\"$CLIENT_NAME\\\",host=\\\"$(hostname)\\\"} $LOAD_1MIN\" >> \"$TEXTFILE_DIR/system_health.prom\"\n\n# Service Status Checks\n{% for service in client_critical_services | default(['sshd', 'systemd-resolved']) %}\nif systemctl is-active {{ service }} >/dev/null 2>&1; then\n  echo \"service_status{client=\\\"$CLIENT_NAME\\\",host=\\\"$(hostname)\\\",service=\\\"{{ service }}\\\"} 1\" >> \"$TEXTFILE_DIR/system_health.prom\"\nelse\n  echo \"service_status{client=\\\"$CLIENT_NAME\\\",host=\\\"$(hostname)\\\",service=\\\"{{ service }}\\\"} 0\" >> \"$TEXTFILE_DIR/system_health.prom\"\nfi\n{% endfor %}\n\n# Last update timestamp\necho \"system_health_last_update{client=\\\"$CLIENT_NAME\\\",host=\\\"$(hostname)\\\"} $(date +%s)\" >> \"$TEXTFILE_DIR/system_health.prom\"\n"
                dest: /opt/msp-monitoring/{{ client_name }}/system_health_check.sh
                mode: "0755"
                owner: root
                group: root
              register: health_check_script

            - name: Schedule system health checks
              ansible.builtin.cron:
                name: System health check for {{ client_name }}
                minute: "*/5"
                job: /opt/msp-monitoring/{{ client_name }}/system_health_check.sh
                user: root
              register: health_check_cron

    - name: Configure log monitoring
      when:
        - monitoring_profiles[client_monitoring_profile].log_monitoring
        - msp_monitoring_server != ""
      tags:
        - monitoring
        - logging
      block:
        - name: Configure rsyslog for centralized logging
          ansible.builtin.blockinfile:
            path: /etc/rsyslog.conf
            block: |
              # {{ client_name }} log forwarding configuration
              *.info;mail.none;authpriv.none;cron.none @@{{ msp_monitoring_server }}:514

              # Local log retention for {{ client_name }}
              $template ClientLogFormat,"{{ client_name }}-%HOSTNAME%-%$year%-%$month%-%$day%.log"
              *.* /var/log/msp/{{ client_name }}/system.log;ClientLogFormat
              & stop
            marker: "# {mark} {{ client_name }} LOG FORWARDING"
            backup: true
          notify: Restart rsyslog
          register: rsyslog_config

        - name: Configure logrotate for client logs
          ansible.builtin.copy:
            content: |
              /var/log/msp/{{ client_name }}/*.log {
                  daily
                  rotate {{ client_retention_days }}
                  compress
                  delaycompress
                  missingok
                  notifempty
                  create 644 root root
                  postrotate
                      systemctl reload rsyslog > /dev/null 2>&1 || true
                  endscript
              }
            dest: /etc/logrotate.d/{{ client_name }}-logs
            mode: "0644"
          register: logrotate_config

    - name: Configure process monitoring
      when: monitoring_profiles[client_monitoring_profile].process_monitoring
      tags:
        - monitoring
        - processes
      block:
        - name: Create process monitoring script
          ansible.builtin.copy:
            content: "#!/bin/bash\n# Process monitoring for {{ client_name }}\n\nTEXTFILE_DIR=\"/var/lib/prometheus/textfile_collector\"\nCLIENT_NAME=\"{{ client_name }}\"\n\n# Monitor critical processes\n{% for process in client_critical_processes | default(['sshd', 'systemd', 'kernel']) %}\nPROCESS_COUNT=$(pgrep -c {{ process }} 2>/dev/null || echo \"0\")\necho \"process_count{client=\\\"$CLIENT_NAME\\\",host=\\\"$(hostname)\\\",process=\\\"{{ process }}\\\"} $PROCESS_COUNT\" >> \"$TEXTFILE_DIR/process_monitoring.prom\"\n{% endfor %}\n\n# Overall process count\nTOTAL_PROCESSES=$(ps aux | wc -l)\necho \"total_processes{client=\\\"$CLIENT_NAME\\\",host=\\\"$(hostname)\\\"} $TOTAL_PROCESSES\" >> \"$TEXTFILE_DIR/process_monitoring.prom\"\n\n# Zombie processes\nZOMBIE_PROCESSES=$(ps aux | awk '$8 ~ /^Z/ { count++ } END { print count+0 }')\necho \"zombie_processes{client=\\\"$CLIENT_NAME\\\",host=\\\"$(hostname)\\\"} $ZOMBIE_PROCESSES\" >> \"$TEXTFILE_DIR/process_monitoring.prom\"\n\n# High CPU processes (top 5)\nps aux --sort=-%cpu | head -6 | tail -5 | awk -v client=\"$CLIENT_NAME\" -v host=\"$(hostname)\" '{ printf \"high_cpu_process{client=\\\"%s\\\",host=\\\"%s\\\",user=\\\"%s\\\",pid=\\\"%s\\\",command=\\\"%s\\\"} %s\\n\", client, host, $1, $2, $11, $3 }' >> \"$TEXTFILE_DIR/process_monitoring.prom\"\n\necho \"process_monitoring_last_update{client=\\\"$CLIENT_NAME\\\",host=\\\"$(hostname)\\\"} $(date +%s)\" >> \"$TEXTFILE_DIR/process_monitoring.prom\"\n"
            dest: /opt/msp-monitoring/{{ client_name }}/process_monitoring.sh
            mode: "0755"
            owner: root
            group: root
          register: process_monitoring_script

        - name: Schedule process monitoring
          ansible.builtin.cron:
            name: Process monitoring for {{ client_name }}
            minute: "*/2"
            job: /opt/msp-monitoring/{{ client_name }}/process_monitoring.sh
            user: root
          register: process_monitoring_cron

    - name: Configure security monitoring
      when: monitoring_profiles[client_monitoring_profile].security_monitoring | default(false)
      tags:
        - monitoring
        - security
      block:
        - name: Create security monitoring script
          ansible.builtin.copy:
            content: "#!/bin/bash\n# Security monitoring for {{ client_name }}\n\nTEXTFILE_DIR=\"/var/lib/prometheus/textfile_collector\"\nCLIENT_NAME=\"{{ client_name }}\"\nLOGFILE=\"/var/log/msp/{{ client_name }}/security-events.log\"\n\n# Failed SSH login attempts (last 5 minutes)\nFAILED_SSH=$(journalctl --since \"5 minutes ago\" | grep -c \"Failed password\" || echo \"0\")\necho \"failed_ssh_attempts{client=\\\"$CLIENT_NAME\\\",host=\\\"$(hostname)\\\"} $FAILED_SSH\" > \"$TEXTFILE_DIR/security_monitoring.prom\"\n\n# Successful SSH logins (last 5 minutes)\nSUCCESSFUL_SSH=$(journalctl --since \"5 minutes ago\" | grep -c \"Accepted password\\|Accepted publickey\" || echo \"0\")\necho \"successful_ssh_logins{client=\\\"$CLIENT_NAME\\\",host=\\\"$(hostname)\\\"} $SUCCESSFUL_SSH\" >> \"$TEXTFILE_DIR/security_monitoring.prom\"\n\n# sudo usage (last 5 minutes)\nSUDO_USAGE=$(journalctl --since \"5 minutes ago\" | grep -c \"sudo:\" || echo \"0\")\necho \"sudo_usage_count{client=\\\"$CLIENT_NAME\\\",host=\\\"$(hostname)\\\"} $SUDO_USAGE\" >> \"$TEXTFILE_DIR/security_monitoring.prom\"\n\n# File permission changes (if auditd is running)\nif systemctl is-active auditd >/dev/null 2>&1; then\n  PERM_CHANGES=$(ausearch -ts recent -k access 2>/dev/null | grep -c \"type=SYSCALL\" || echo \"0\")\n  echo \"file_permission_changes{client=\\\"$CLIENT_NAME\\\",host=\\\"$(hostname)\\\"} $PERM_CHANGES\" >> \"$TEXTFILE_DIR/security_monitoring.prom\"\nfi\n\n# Log critical events\nif [ \"$FAILED_SSH\" -gt 10 ]; then\n  echo \"$(date): HIGH - Excessive failed SSH attempts: $FAILED_SSH\" >> \"$LOGFILE\"\n  logger -t \"SECURITY-ALERT\" \"Client: $CLIENT_NAME | Host: $(hostname) | HIGH - Excessive failed SSH attempts: $FAILED_SSH\"\nfi\n\necho \"security_monitoring_last_update{client=\\\"$CLIENT_NAME\\\",host=\\\"$(hostname)\\\"} $(date +%s)\" >> \"$TEXTFILE_DIR/security_monitoring.prom\"\n"
            dest: /opt/msp-monitoring/{{ client_name }}/security_monitoring.sh
            mode: "0755"
            owner: root
            group: root
          register: security_monitoring_script

        - name: Schedule security monitoring
          ansible.builtin.cron:
            name: Security monitoring for {{ client_name }}
            minute: "*/5"
            job: /opt/msp-monitoring/{{ client_name }}/security_monitoring.sh
            user: root
          register: security_monitoring_cron

    - name: Configure client-specific alerting
      when: monitoring_profiles[client_monitoring_profile].alerting
      tags:
        - monitoring
        - alerting
      block:
        - name: Create Prometheus alerting rules
          ansible.builtin.copy:
            content: |
              groups:
              - name: {{ client_name }}_alerts
                rules:
                # CPU Usage Alert
                - alert: HighCPUUsage_{{ client_name }}
                  expr: system_cpu_usage_percent{client="{{ client_name }}"} > {{ client_monitoring_thresholds.cpu_warning }}
                  for: 5m
                  labels:
                    severity: warning
                    client: {{ client_name }}
                  annotations:
                    summary: "High CPU usage on {% raw %}{{ $labels.host }}{% endraw %}"
                    description: "CPU usage is {% raw %}{{ $value }}{% endraw %}% on {% raw %}{{ $labels.host }}{% endraw %} for client {{ client_name }}"

                - alert: CriticalCPUUsage_{{ client_name }}
                  expr: system_cpu_usage_percent{client="{{ client_name }}"} > {{ client_monitoring_thresholds.cpu_critical }}
                  for: 2m
                  labels:
                    severity: critical
                    client: {{ client_name }}
                  annotations:
                    summary: "Critical CPU usage on {% raw %}{{ $labels.host }}{% endraw %}"
                    description: "CPU usage is {% raw %}{{ $value }}{% endraw %}% on {% raw %}{{ $labels.host }}{% endraw %} for client {{ client_name }}"

                # Memory Usage Alert
                - alert: HighMemoryUsage_{{ client_name }}
                  expr: system_memory_usage_percent{client="{{ client_name }}"} > {{ client_monitoring_thresholds.memory_warning }}
                  for: 5m
                  labels:
                    severity: warning
                    client: {{ client_name }}
                  annotations:
                    summary: "High memory usage on {% raw %}{{ $labels.host }}{% endraw %}"
                    description: "Memory usage is {% raw %}{{ $value }}{% endraw %}% on {% raw %}{{ $labels.host }}{% endraw %} for client {{ client_name }}"

                # Disk Usage Alert
                - alert: HighDiskUsage_{{ client_name }}
                  expr: system_disk_usage_percent{client="{{ client_name }}"} > {{ client_monitoring_thresholds.disk_warning }}
                  for: 10m
                  labels:
                    severity: warning
                    client: {{ client_name }}
                  annotations:
                    summary: "High disk usage on {% raw %}{{ $labels.host }}{% endraw %}"
                    description: "Disk usage is {% raw %}{{ $value }}{% endraw %}% on {% raw %}{{ $labels.host }}:{{ $labels.mountpoint }}{% endraw %} for client {{ client_name }}"

                # Service Down Alert
                - alert: ServiceDown_{{ client_name }}
                  expr: service_status{client="{{ client_name }}"} == 0
                  for: 1m
                  labels:
                    severity: critical
                    client: {{ client_name }}
                  annotations:
                    summary: "Service down on {% raw %}{{ $labels.host }}{% endraw %}"
                    description: "Service {% raw %}{{ $labels.service }}{% endraw %} is down on {% raw %}{{ $labels.host }}{% endraw %} for client {{ client_name }}"

                # Security Alerts
                - alert: ExcessiveFailedSSH_{{ client_name }}
                  expr: failed_ssh_attempts{client="{{ client_name }}"} > 10
                  for: 0m
                  labels:
                    severity: warning
                    client: {{ client_name }}
                  annotations:
                    summary: "Excessive failed SSH attempts on {% raw %}{{ $labels.host }}{% endraw %}"
                    description: "{% raw %}{{ $value }}{% endraw %} failed SSH attempts detected on {% raw %}{{ $labels.host }}{% endraw %} for client {{ client_name }}"
            dest: /etc/prometheus/{{ client_name }}/alerting_rules.yml
            mode: "0644"
          register: alerting_rules

    - name: Install monitoring dependencies
      tags:
        - monitoring
        - dependencies
      loop:
        - curl
        - wget
        - jq
        - htop
        - iotop
        - nethogs
      ansible.builtin.package:
        name: "{{ item }}"
        state: present
      register: monitoring_packages
      failed_when: false

  post_tasks:
    - name: Collect monitoring setup results
      tags:
        - reporting
      loop:
        - component: Node Exporter
          status: "{{ 'INSTALLED' if node_exporter_status.changed else 'RUNNING' }}"
          description: Prometheus metrics collection
        - component: System Health Monitoring
          status: "{{ 'CONFIGURED' if health_check_script.changed else 'ACTIVE' }}"
          description: Custom system metrics
        - component: Log Forwarding
          status: "{{ 'CONFIGURED' if rsyslog_config.changed else 'ACTIVE' }}"
          description: Centralized log collection
        - component: Process Monitoring
          status: "{{ 'CONFIGURED' if process_monitoring_script.changed else 'ACTIVE' }}"
          description: Process health tracking
        - component: Security Monitoring
          status: "{{ 'CONFIGURED' if security_monitoring_script.changed else 'ACTIVE' }}"
          description: Security event detection
        - component: Alerting Rules
          status: "{{ 'CONFIGURED' if alerting_rules.changed else 'ACTIVE' }}"
          description: Client-specific alert thresholds
      ansible.builtin.set_fact:
        monitoring_components: "{{ monitoring_components + [item] }}"

    - name: Generate monitoring setup report
      tags:
        - reporting
      ansible.builtin.copy:
        content: "Monitoring Setup Report for {{ client_name }}\n=============================================\nMonitoring Profile: {{ client_monitoring_profile }}\nHost: {{ inventory_hostname }}\nSession ID: {{ monitoring_session_id }}\n\nConfigured Components:\n{% for component in monitoring_components %}\n- {{ component.component }}: {{ component.status }} - {{ component.description }}\n{% endfor %}\n\nMonitoring Thresholds:\n- CPU Warning: {{ client_monitoring_thresholds.cpu_warning }}%\n- CPU Critical: {{ client_monitoring_thresholds.cpu_critical }}%\n- Memory Warning: {{ client_monitoring_thresholds.memory_warning }}%\n- Memory Critical: {{ client_monitoring_thresholds.memory_critical }}%\n- Disk Warning: {{ client_monitoring_thresholds.disk_warning }}%\n- Disk Critical: {{ client_monitoring_thresholds.disk_critical }}%\n\nAlerting Channels:\n{% for channel in client_alerting_channels %}\n- {{ channel }}\n{% endfor %}\n\nData Retention: {{ client_retention_days }} days\n\nReport Generated: {{ ansible_date_time.iso8601 }}\n"
        dest: /var/log/msp/{{ client_name }}/monitoring/monitoring-setup-{{ monitoring_session_id }}.txt
        mode: "0640"

    - name: Test monitoring endpoints
      tags:
        - testing
      register: metrics_test
      failed_when: false
      ansible.builtin.uri:
        url: http://localhost:9100/metrics/{{ client_name }}
        method: GET
        timeout: 10

    - name: Log monitoring setup completion
      tags:
        - logging
        - skip_ansible_lint
      vars:
        msp_log_server: "{{ msp_syslog_server | default('') }}"
        msp_log_tag: MONITORING-SETUP
        msp_log_message: "Client: {{ client_name }} | Host: {{ inventory_hostname }} | Session: {{ monitoring_session_id }} | Profile: {{ client_monitoring_profile }} | Status: COMPLETED | Components: {{ monitoring_components | length }} | Endpoint: {{ 'ACCESSIBLE' if metrics_test.status == 200 else 'FAILED' }}"
      ansible.builtin.include_role:
        name: msp-logging

  handlers:
    - name: Restart rsyslog
      ansible.builtin.service:
        name: rsyslog
        state: restarted

