---
# CMMC (Cybersecurity Maturity Model Certification) Compliance Playbook
# Implements CMMC Level 2 and Level 3 security controls for defense contractors
# Multi-tenant support with client-specific compliance requirements

- name: CMMC Compliance Implementation
  hosts: "{{ target_hosts | default('all') }}"
  become: true
  gather_facts: true
  vars:
    # Client-specific variables
    client_name: "{{ client_name | mandatory }}"
    client_cmmc_level: "{{ client_cmmc_level | default('Level_2') }}"  # Level_1, Level_2, Level_3
    client_cmmc_profile: "{{ client_cmmc_profile | default('basic') }}"  # basic, enhanced, expert
    client_cmmc_exceptions: "{{ client_cmmc_exceptions | default([]) }}"
    
    # MSP defaults
    msp_syslog_server: "{{ msp_syslog_server | default('') }}"
    
    # Runtime variables
    cmmc_session_id: "{{ ansible_date_time.epoch }}-{{ client_name }}-cmmc"
    compliance_findings: []
    
    # CMMC Control mappings by level
    cmmc_controls:
      Level_2:
        required_controls: 
          - "AC.L2-3.1.1"   # Access Control
          - "AC.L2-3.1.2"   # Account Management
          - "AU.L2-3.3.1"   # Audit Events
          - "AU.L2-3.3.2"   # Audit Review
          - "CM.L2-3.4.1"   # Baseline Configuration
          - "CM.L2-3.4.2"   # Configuration Change Control
          - "IA.L2-3.5.1"   # Identification and Authentication
          - "IA.L2-3.5.2"   # Multi-factor Authentication
          - "SC.L2-3.13.1"  # Boundary Protection
          - "SC.L2-3.13.2"  # Communications Protection
          - "SI.L2-3.14.1"  # Flaw Remediation
          - "SI.L2-3.14.2"  # Malicious Code Protection
      Level_3:
        required_controls:
          - "AC.L2-3.1.20"  # External Connections
          - "AC.L2-3.1.22"  # Publicly Accessible Content
          - "AU.L2-3.3.8"   # Time Stamps
          - "AU.L2-3.3.9"   # Protection of Audit Information
          - "CM.L2-3.4.6"   # Software Usage Restrictions
          - "CM.L2-3.4.7"   # User-Installed Software
          - "IA.L2-3.5.7"   # Cryptographic Module Authentication
          - "IA.L2-3.5.8"   # Identifier Reuse
          - "SC.L2-3.13.8"  # Transmission Confidentiality
          - "SC.L2-3.13.10" # Cryptographic Key Establishment
          - "SI.L2-3.14.4"  # Information System Monitoring
          - "SI.L2-3.14.5"  # Security Alerts and Advisories

  pre_tasks:
    - name: Validate CMMC compliance context
      ansible.builtin.assert:
        that:
          - client_name is defined
          - client_cmmc_level in ['Level_1', 'Level_2', 'Level_3']
          - client_cmmc_profile in ['basic', 'enhanced', 'expert']
        fail_msg: "Invalid CMMC compliance parameters"
      tags: [validation]

    - name: Create client CMMC compliance log directory
      ansible.builtin.file:
        path: "/var/log/msp/{{ client_name }}/cmmc-compliance"
        state: directory
        mode: '0750'
        owner: root
        group: root
      tags: [logging]

    - name: Log CMMC compliance initiation
      ansible.builtin.shell: |
        logger -n {{ msp_syslog_server }} -t "CMMC-COMPLIANCE" "Client: {{ client_name }} | Host: {{ inventory_hostname }} | Session: {{ cmmc_session_id }} | Level: {{ client_cmmc_level }} | Status: STARTED"
      when: msp_syslog_server != ""
      ignore_errors: true
      tags: [logging]

  tasks:
    # Access Control (AC) Domain
    - name: CMMC AC.L2-3.1.1 - Limit system access to authorized users
      block:
        - name: Configure account lockout policy
          ansible.builtin.lineinfile:
            path: /etc/security/faillock.conf
            regexp: "{{ item.regexp }}"
            line: "{{ item.line }}"
            create: true
            backup: true
          loop:
            - { regexp: '^#?deny', line: 'deny = 3' }
            - { regexp: '^#?unlock_time', line: 'unlock_time = 900' }
            - { regexp: '^#?fail_interval', line: 'fail_interval = 900' }
          register: cmmc_ac_1_1_lockout
          
        - name: Configure password aging
          ansible.builtin.lineinfile:
            path: /etc/login.defs
            regexp: "{{ item.regexp }}"
            line: "{{ item.line }}"
            backup: true
          loop:
            - { regexp: '^PASS_MAX_DAYS', line: 'PASS_MAX_DAYS 60' }
            - { regexp: '^PASS_MIN_DAYS', line: 'PASS_MIN_DAYS 1' }
            - { regexp: '^PASS_WARN_AGE', line: 'PASS_WARN_AGE 7' }
          register: cmmc_ac_1_1_aging
      when: '"AC.L2-3.1.1" not in client_cmmc_exceptions'
      tags: [cmmc, access_control, AC.L2-3.1.1]

    # CMMC AC.L2-3.1.2 - Account Management
    - name: CMMC AC.L2-3.1.2 - Manage user accounts
      block:
        - name: Disable unused system accounts
          ansible.builtin.user:
            name: "{{ item }}"
            shell: /sbin/nologin
            password: "!"
          loop:
            - games
            - ftp
            - nobody
            - apache
            - www-data
          ignore_errors: true
          register: cmmc_ac_1_2_disable
          
        - name: Remove .rhosts and .netrc files
          ansible.builtin.find:
            paths: /home
            patterns: ".rhosts,.netrc"
            hidden: true
            recurse: true
          register: rhosts_files
          
        - name: Delete found .rhosts and .netrc files
          ansible.builtin.file:
            path: "{{ item.path }}"
            state: absent
          loop: "{{ rhosts_files.files }}"
          register: cmmc_ac_1_2_cleanup
      when: '"AC.L2-3.1.2" not in client_cmmc_exceptions'
      tags: [cmmc, access_control, AC.L2-3.1.2]

    # Audit and Accountability (AU) Domain
    - name: CMMC AU.L2-3.3.1 - Create and retain audit logs
      block:
        - name: Configure auditd service
          ansible.builtin.service:
            name: auditd
            state: started
            enabled: true
            
        - name: Configure audit rules for CMMC
          ansible.builtin.blockinfile:
            path: /etc/audit/rules.d/50-cmmc.rules
            create: true
            block: |
              # CMMC AU.L2-3.3.1 - Audit Events
              
              # Unsuccessful file access (AC violations)
              -a always,exit -F arch=b64 -S open,openat,open_by_handle_at -F exit=-EACCES -F auid>=1000 -F auid!=unset -k access
              -a always,exit -F arch=b64 -S open,openat,open_by_handle_at -F exit=-EPERM -F auid>=1000 -F auid!=unset -k access
              
              # Privileged commands
              -a always,exit -F path=/usr/bin/su -F perm=x -F auid>=1000 -F auid!=unset -k privileged
              -a always,exit -F path=/usr/bin/sudo -F perm=x -F auid>=1000 -F auid!=unset -k privileged
              
              # Account modifications
              -w /etc/passwd -p wa -k identity
              -w /etc/group -p wa -k identity
              -w /etc/gshadow -p wa -k identity
              -w /etc/shadow -p wa -k identity
              
              # Network environment
              -a always,exit -F arch=b64 -S sethostname,setdomainname -k network_modifications
              -w /etc/issue -p wa -k network_modifications
              -w /etc/issue.net -p wa -k network_modifications
              -w /etc/hosts -p wa -k network_modifications
              -w /etc/sysconfig/network -p wa -k network_modifications
            marker: "# {mark} CMMC AUDIT RULES"
          notify: reload auditd
          register: cmmc_au_3_1_rules
      when: '"AU.L2-3.3.1" not in client_cmmc_exceptions'
      tags: [cmmc, audit, AU.L2-3.3.1]

    # Configuration Management (CM) Domain
    - name: CMMC CM.L2-3.4.1 - Establish and maintain baseline configurations
      block:
        - name: Install and configure AIDE (file integrity monitoring)
          ansible.builtin.package:
            name: aide
            state: present
            
        - name: Initialize AIDE database
          ansible.builtin.shell: |
            if [ ! -f /var/lib/aide/aide.db.gz ]; then
              aide --init
              mv /var/lib/aide/aide.db.new.gz /var/lib/aide/aide.db.gz
            fi
          register: aide_init_result
          changed_when: "'moved' in aide_init_result.stdout"
          
        - name: Configure AIDE for daily checks
          ansible.builtin.cron:
            name: "CMMC CM.L2-3.4.1 - Daily AIDE check"
            minute: "0"
            hour: "5"
            job: "/usr/sbin/aide --check 2>&1 | logger -t AIDE"
            user: root
          register: cmmc_cm_4_1_aide
      when: '"CM.L2-3.4.1" not in client_cmmc_exceptions'
      tags: [cmmc, configuration_management, CM.L2-3.4.1]

    # Identification and Authentication (IA) Domain
    - name: CMMC IA.L2-3.5.1 - Identify users uniquely
      block:
        - name: Ensure no duplicate UIDs exist
          ansible.builtin.shell: |
            awk -F: '{print $3}' /etc/passwd | sort | uniq -d
          register: duplicate_uids
          changed_when: false
          failed_when: duplicate_uids.stdout | length > 0
          
        - name: Ensure no duplicate usernames exist
          ansible.builtin.shell: |
            awk -F: '{print $1}' /etc/passwd | sort | uniq -d
          register: duplicate_users
          changed_when: false
          failed_when: duplicate_users.stdout | length > 0
          
        - name: Configure unique user identification
          ansible.builtin.lineinfile:
            path: /etc/login.defs
            regexp: '^UID_MIN'
            line: 'UID_MIN 1000'
            backup: true
          register: cmmc_ia_5_1_uid
      when: '"IA.L2-3.5.1" not in client_cmmc_exceptions'
      tags: [cmmc, identification_authentication, IA.L2-3.5.1]

    # CMMC IA.L2-3.5.2 - Multi-factor Authentication (Level 2+)
    - name: CMMC IA.L2-3.5.2 - Implement multi-factor authentication
      block:
        - name: Install required packages for MFA
          ansible.builtin.package:
            name: "{{ item }}"
            state: present
          loop:
            - google-authenticator
            - libpam-google-authenticator
          when: ansible_os_family == "Debian"
          
        - name: Install required packages for MFA (RHEL)
          ansible.builtin.package:
            name: "{{ item }}"
            state: present
          loop:
            - google-authenticator
            - pam_google_authenticator
          when: ansible_os_family == "RedHat"
          
        - name: Configure PAM for Google Authenticator
          ansible.builtin.lineinfile:
            path: /etc/pam.d/sshd
            line: "auth required pam_google_authenticator.so"
            insertafter: "auth       substack     password-auth"
            backup: true
          register: cmmc_ia_5_2_pam
          
        - name: Configure SSH for challenge-response auth
          ansible.builtin.lineinfile:
            path: /etc/ssh/sshd_config
            regexp: "{{ item.regexp }}"
            line: "{{ item.line }}"
            backup: true
          loop:
            - { regexp: '^#?ChallengeResponseAuthentication', line: 'ChallengeResponseAuthentication yes' }
            - { regexp: '^#?AuthenticationMethods', line: 'AuthenticationMethods publickey,keyboard-interactive' }
          notify: restart sshd
          register: cmmc_ia_5_2_ssh
      when: 
        - '"IA.L2-3.5.2" not in client_cmmc_exceptions'
        - client_cmmc_level in ['Level_2', 'Level_3']
      tags: [cmmc, identification_authentication, IA.L2-3.5.2]

    # System and Communications Protection (SC) Domain
    - name: CMMC SC.L2-3.13.1 - Monitor, control, and protect communications
      block:
        - name: Configure secure network protocols
          ansible.builtin.lineinfile:
            path: /etc/ssh/sshd_config
            regexp: "{{ item.regexp }}"
            line: "{{ item.line }}"
            backup: true
          loop:
            - { regexp: '^#?Protocol', line: 'Protocol 2' }
            - { regexp: '^#?Ciphers', line: 'Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr' }
            - { regexp: '^#?MACs', line: 'MACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha2-256,hmac-sha2-512' }
            - { regexp: '^#?KexAlgorithms', line: 'KexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512' }
          notify: restart sshd
          register: cmmc_sc_13_1_ssh
          
        - name: Disable insecure services
          ansible.builtin.service:
            name: "{{ item }}"
            state: stopped
            enabled: false
          loop:
            - telnet
            - rsh
            - rlogin
            - ftp
          ignore_errors: true
          register: cmmc_sc_13_1_services
      when: '"SC.L2-3.13.1" not in client_cmmc_exceptions'
      tags: [cmmc, system_communications_protection, SC.L2-3.13.1]

    # System and Information Integrity (SI) Domain
    - name: CMMC SI.L2-3.14.1 - Identify and correct system flaws
      block:
        - name: Configure automatic security updates
          ansible.builtin.lineinfile:
            path: /etc/dnf/automatic.conf
            regexp: "{{ item.regexp }}"
            line: "{{ item.line }}"
            create: true
          loop:
            - { regexp: '^upgrade_type', line: 'upgrade_type = security' }
            - { regexp: '^apply_updates', line: 'apply_updates = yes' }
            - { regexp: '^emit_via', line: 'emit_via = stdio' }
          when: ansible_pkg_mgr == "dnf"
          register: cmmc_si_14_1_dnf
          
        - name: Configure unattended-upgrades (Ubuntu)
          ansible.builtin.package:
            name: unattended-upgrades
            state: present
          when: ansible_os_family == "Debian"
          
        - name: Enable automatic security updates service
          ansible.builtin.service:
            name: "{{ 'dnf-automatic-install.timer' if ansible_pkg_mgr == 'dnf' else 'unattended-upgrades' }}"
            state: started
            enabled: true
          register: cmmc_si_14_1_service
      when: '"SI.L2-3.14.1" not in client_cmmc_exceptions'
      tags: [cmmc, system_information_integrity, SI.L2-3.14.1]

    # CMMC Level 3 Enhanced Controls
    - name: CMMC Level 3 Enhanced Security Controls
      block:
        - name: CMMC AC.L2-3.1.20 - Control external system connections
          ansible.builtin.lineinfile:
            path: /etc/hosts.deny
            line: "ALL: ALL"
            create: true
            backup: true
          register: cmmc_ac_1_20_deny
          
        - name: CMMC AU.L2-3.3.8 - Provide time stamps for audit records
          ansible.builtin.lineinfile:
            path: /etc/chrony.conf
            regexp: "{{ item.regexp }}"
            line: "{{ item.line }}"
            backup: true
          loop:
            - { regexp: '^#?server', line: 'server time.nist.gov iburst' }
            - { regexp: '^#?makestep', line: 'makestep 1.0 3' }
          register: cmmc_au_3_8_time
          
        - name: CMMC SI.L2-3.14.4 - Monitor information system security alerts
          ansible.builtin.lineinfile:
            path: /etc/rsyslog.conf
            line: "*.crit @@{{ msp_syslog_server }}"
            backup: true
          when: msp_syslog_server != ""
          register: cmmc_si_14_4_monitoring
      when: 
        - client_cmmc_level == "Level_3"
        - '"Level_3_Enhanced" not in client_cmmc_exceptions'
      tags: [cmmc, level_3, enhanced_controls]

    # Client-specific CMMC exceptions handling
    - name: Apply client-specific CMMC exceptions
      ansible.builtin.debug:
        msg: "Skipping CMMC control {{ item }} per client exception"
      loop: "{{ client_cmmc_exceptions }}"
      when: client_cmmc_exceptions | length > 0
      tags: [cmmc, exceptions]

  post_tasks:
    - name: Collect CMMC compliance findings
      ansible.builtin.set_fact:
        compliance_findings: "{{ compliance_findings + [item] }}"
      loop:
        - { control: "AC.L2-3.1.1", status: "{{ 'IMPLEMENTED' if cmmc_ac_1_1_lockout.changed else 'COMPLIANT' }}", description: "Account lockout policy configured" }
        - { control: "AC.L2-3.1.2", status: "{{ 'IMPLEMENTED' if cmmc_ac_1_2_disable.changed else 'COMPLIANT' }}", description: "System accounts managed" }
        - { control: "AU.L2-3.3.1", status: "{{ 'IMPLEMENTED' if cmmc_au_3_1_rules.changed else 'COMPLIANT' }}", description: "Audit logging configured" }
        - { control: "CM.L2-3.4.1", status: "{{ 'IMPLEMENTED' if cmmc_cm_4_1_aide.changed else 'COMPLIANT' }}", description: "Baseline configuration monitoring" }
        - { control: "IA.L2-3.5.1", status: "{{ 'IMPLEMENTED' if cmmc_ia_5_1_uid.changed else 'COMPLIANT' }}", description: "Unique user identification" }
        - { control: "IA.L2-3.5.2", status: "{{ 'IMPLEMENTED' if cmmc_ia_5_2_pam.changed else 'COMPLIANT' }}", description: "Multi-factor authentication", level: "Level_2+" }
        - { control: "SC.L2-3.13.1", status: "{{ 'IMPLEMENTED' if cmmc_sc_13_1_ssh.changed else 'COMPLIANT' }}", description: "Secure communications" }
        - { control: "SI.L2-3.14.1", status: "{{ 'IMPLEMENTED' if cmmc_si_14_1_service.changed else 'COMPLIANT' }}", description: "Automated security updates" }
      tags: [reporting]

    - name: Generate CMMC compliance report
      ansible.builtin.template:
        src: cmmc_compliance_report.j2
        dest: "/var/log/msp/{{ client_name }}/cmmc-compliance/cmmc-report-{{ cmmc_session_id }}.json"
        mode: '0640'
      tags: [reporting]

    - name: Create CMMC compliance summary
      ansible.builtin.copy:
        content: |
          CMMC Compliance Summary for {{ client_name }}
          ============================================
          CMMC Level: {{ client_cmmc_level }}
          Profile: {{ client_cmmc_profile }}
          Host: {{ inventory_hostname }}
          Session ID: {{ cmmc_session_id }}
          
          Implemented Controls:
          {% for finding in compliance_findings %}
          - {{ finding.control }}: {{ finding.status }} - {{ finding.description }}
          {% endfor %}
          
          Exceptions Applied:
          {% for exception in client_cmmc_exceptions %}
          - {{ exception }}
          {% endfor %}
          
          Report Generated: {{ ansible_date_time.iso8601 }}
        dest: "/var/log/msp/{{ client_name }}/cmmc-compliance/cmmc-summary-{{ cmmc_session_id }}.txt"
        mode: '0640'
      tags: [reporting]

    - name: Log CMMC compliance completion
      ansible.builtin.include_role:
        name: msp-logging
      vars:
        msp_log_server: "{{ msp_syslog_server | default('') }}"
        msp_log_tag: "CMMC-COMPLIANCE"
        msp_log_message: "Client: {{ client_name }} | Host: {{ inventory_hostname }} | Session: {{ cmmc_session_id }} | Level: {{ client_cmmc_level }} | Status: COMPLETED | Controls: {{ compliance_findings | length }}"
      tags: [logging, skip_ansible_lint]

  handlers:
    - name: Restart sshd
      ansible.builtin.service:
        name: sshd
        state: restarted

    - name: Reload auditd
      ansible.builtin.service:
        name: auditd
        state: reloaded
