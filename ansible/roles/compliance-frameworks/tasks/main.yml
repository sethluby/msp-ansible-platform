---
# MSP Compliance Frameworks Main Tasks
# Integrated ansible-lockdown patterns for multi-framework compliance
# Purpose: Orchestrate implementation of compliance controls across multiple frameworks

- name: "Compliance | Display framework and client information"
  ansible.builtin.debug:
    msg:
      - "Starting {{ compliance_framework | upper }} {{ compliance_level }} compliance for {{ client_name }}"
      - "Client Tier: {{ client_tier }}"
      - "Environment: {{ client_environment }}"
      - "Profile: {{ compliance_profile }}"
      - "Control categories enabled: {{ enabled_categories }}"
      - "High disruption allowed: {{ disruption_high }}"
  vars:
    # ansible-lockdown inspired enabled categories tracking
    enabled_categories: >-
      {{
        (enable_access_control | bool | ternary(['Access Control'], [])) +
        (enable_audit_accountability | bool | ternary(['Audit & Accountability'], [])) +
        (enable_config_management | bool | ternary(['Configuration Management'], [])) +
        (enable_identification_auth | bool | ternary(['Identity & Authentication'], [])) +
        (enable_system_protection | bool | ternary(['System Protection'], [])) +
        (enable_system_integrity | bool | ternary(['System Integrity'], []))
      }}
  tags:
    - always
    - compliance_info
    - "{{ compliance_framework }}_info"

- name: "Compliance | Validate system compatibility"
  ansible.builtin.include_tasks: validation.yml
  # Verify system meets minimum requirements for compliance implementation
  tags:
    - always
    - validation
    - "{{ compliance_framework }}_validation"
  # Checks OS version, available packages, and system resources
  tags:
    - cmmc_validation
    - cmmc_prerequisites

- name: "CMMC Compliance | Create compliance directory structure"
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: directory
    owner: "{{ item.owner | default(cmmc_default_owner) }}"
    group: "{{ item.group | default(cmmc_default_group) }}"
    mode: "{{ item.mode | default(cmmc_dir_mode) }}"
  loop:
    - path: "{{ cmmc_base_dir }}"
      mode: "{{ cmmc_secure_dir_mode }}"
    - path: "{{ cmmc_config_dir }}"
      mode: "{{ cmmc_secure_dir_mode }}"
    - path: "{{ cmmc_baseline_dir }}"
      mode: "{{ cmmc_secure_dir_mode }}"
    - path: "{{ cmmc_policies_dir }}"
      mode: "{{ cmmc_secure_dir_mode }}"
    - path: "{{ cmmc_certificates_dir }}"
      mode: "{{ cmmc_private_dir_mode }}"
    - path: "{{ cmmc_keys_dir }}"
      mode: "{{ cmmc_private_dir_mode }}"
    - path: "{{ cmmc_log_base_dir }}"
      mode: "{{ cmmc_dir_mode }}"
    - path: "{{ cmmc_compliance_log_dir }}"
      mode: "{{ cmmc_dir_mode }}"
    - path: "{{ cmmc_reports_dir }}"
      mode: "{{ cmmc_dir_mode }}"
    - path: "{{ cmmc_security_log_dir }}"
      mode: "{{ cmmc_dir_mode }}"
    - path: "{{ cmmc_implementation_log_dir }}"
      mode: "{{ cmmc_dir_mode }}"
    - path: "{{ cmmc_state_base_dir }}"
      mode: "{{ cmmc_secure_dir_mode }}"
    - path: "{{ cmmc_validation_dir }}"
      mode: "{{ cmmc_secure_dir_mode }}"
    - path: "{{ cmmc_backup_dir }}"
      mode: "{{ cmmc_private_dir_mode }}"
    - path: "{{ cmmc_database_dir }}"
      mode: "{{ cmmc_secure_dir_mode }}"
  # Creates standardized directory structure for CMMC artifacts
  # Ensures consistent file organization across all client systems
  tags:
    - cmmc_setup
    - cmmc_directories

- name: "CMMC Compliance | Install compliance validation tools"
  ansible.builtin.copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: "{{ cmmc_default_owner }}"
    group: "{{ cmmc_default_group }}"
    mode: "{{ item.mode }}"
  loop:
    - src: compliance_validator.py
      dest: "{{ local_bin_dir }}/cmmc_validator.py"
      mode: "{{ cmmc_executable_mode }}"
    - src: cmmc_controls.yaml
      dest: "{{ cmmc_base_dir }}/cmmc_controls.yaml"
      mode: "{{ cmmc_secure_file_mode }}"
  # Installs custom validation tools for ongoing compliance checking
  # Tools can operate independently for graceful disconnection scenarios
  tags:
    - cmmc_tools
    - cmmc_validation

# Access Control (AC) Implementation
- name: "CMMC Compliance | Implement Access Control (AC) controls"
  ansible.builtin.include_tasks: access_control.yml
  when: cmmc_enable_access_control | bool
  # Implements AC.1.001-003 controls for user access management
  # Configures SSH, user restrictions, and access monitoring
  tags:
    - cmmc_access_control
    - cmmc_ac

# Audit and Accountability (AU) Implementation  
- name: "CMMC Compliance | Implement Audit and Accountability (AU) controls"
  ansible.builtin.include_tasks: audit_accountability.yml
  when: cmmc_enable_audit_accountability | bool
  # Implements AU.1.006-012 controls for comprehensive audit logging
  # Configures auditd, log retention, and audit event monitoring
  tags:
    - cmmc_audit_accountability
    - cmmc_au

# Configuration Management (CM) Implementation
- name: "CMMC Compliance | Implement Configuration Management (CM) controls"
  ansible.builtin.include_tasks: config_management.yml
  when: cmmc_enable_config_management | bool
  # Implements CM.1.073 controls for baseline configuration management
  # Establishes system baselines and change tracking mechanisms
  tags:
    - cmmc_config_management
    - cmmc_cm

# Identification and Authentication (IA) Implementation
- name: "CMMC Compliance | Implement Identification and Authentication (IA) controls"
  ansible.builtin.include_tasks: identification_auth.yml
  when: cmmc_enable_identification_auth | bool
  # Implements IA.1.076-077 controls for strong authentication
  # Configures multi-factor authentication and identity management
  tags:
    - cmmc_identification_auth
    - cmmc_ia

# System and Communications Protection (SC) Implementation
- name: "CMMC Compliance | Implement System and Communications Protection (SC) controls"
  ansible.builtin.include_tasks: system_protection.yml
  when: cmmc_enable_system_protection | bool
  # Implements SC.1.175-178 controls for data protection and encryption
  # Configures encryption, secure communications, and system hardening
  tags:
    - cmmc_system_protection
    - cmmc_sc

# System and Information Integrity (SI) Implementation
- name: "CMMC Compliance | Implement System and Information Integrity (SI) controls"
  ansible.builtin.include_tasks: system_integrity.yml
  when: cmmc_enable_system_integrity | bool
  # Implements SI.1.210-214 controls for system integrity monitoring
  # Configures file integrity monitoring and security alert systems
  tags:
    - cmmc_system_integrity
    - cmmc_si

# Post-Implementation Validation
- name: "CMMC Compliance | Run comprehensive compliance validation"
  ansible.builtin.include_tasks: validation.yml
  vars:
    validation_mode: "post_implementation"
  # Validates all implemented controls are functioning correctly
  # Generates compliance status report for verification
  tags:
    - cmmc_validation
    - cmmc_post_check

# Compliance Reporting
- name: "CMMC Compliance | Generate compliance reports"
  ansible.builtin.include_tasks: reporting.yml
  when: cmmc_reporting_enabled | bool
  # Generates detailed compliance reports in specified formats
  # Supports both local storage and MSP integration endpoints
  tags:
    - cmmc_reporting
    - cmmc_reports

- name: "CMMC Compliance | Display completion summary"
  ansible.builtin.debug:
    msg:
      - "CMMC {{ cmmc_level }} compliance implementation completed"
      - "Client: {{ cmmc_client_id }}"
      - "Compliance report location: {{ cmmc_reports_dir }}"
      - "Validation tools installed: {{ local_bin_dir }}/cmmc_validator.py"
      - "Configuration directory: {{ cmmc_base_dir }}"
      - "Log directory: {{ cmmc_log_base_dir }}"
  # Provides summary of completed implementation for operator awareness
  # Includes key file locations for ongoing management
  tags:
    - always
    - cmmc_summary
